// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/NeverlandMJ/ToDo/todo-service/server (interfaces: Repository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	entity "github.com/NeverlandMJ/ToDo/todo-service/pkg/entity"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateTodo mocks base method.
func (m *MockRepository) CreateTodo(arg0 context.Context, arg1 entity.Todo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTodo", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTodo indicates an expected call of CreateTodo.
func (mr *MockRepositoryMockRecorder) CreateTodo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTodo", reflect.TypeOf((*MockRepository)(nil).CreateTodo), arg0, arg1)
}

// DeleteDoneTodos mocks base method.
func (m *MockRepository) DeleteDoneTodos(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDoneTodos", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDoneTodos indicates an expected call of DeleteDoneTodos.
func (mr *MockRepositoryMockRecorder) DeleteDoneTodos(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDoneTodos", reflect.TypeOf((*MockRepository)(nil).DeleteDoneTodos), arg0, arg1)
}

// DeletePassedDeadline mocks base method.
func (m *MockRepository) DeletePassedDeadline(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePassedDeadline", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePassedDeadline indicates an expected call of DeletePassedDeadline.
func (mr *MockRepositoryMockRecorder) DeletePassedDeadline(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePassedDeadline", reflect.TypeOf((*MockRepository)(nil).DeletePassedDeadline), arg0, arg1)
}

// DeleteTodo mocks base method.
func (m *MockRepository) DeleteTodo(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTodo", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTodo indicates an expected call of DeleteTodo.
func (mr *MockRepositoryMockRecorder) DeleteTodo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTodo", reflect.TypeOf((*MockRepository)(nil).DeleteTodo), arg0, arg1)
}

// GetAllTodos mocks base method.
func (m *MockRepository) GetAllTodos(arg0 context.Context, arg1 uuid.UUID) ([]entity.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTodos", arg0, arg1)
	ret0, _ := ret[0].([]entity.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTodos indicates an expected call of GetAllTodos.
func (mr *MockRepositoryMockRecorder) GetAllTodos(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTodos", reflect.TypeOf((*MockRepository)(nil).GetAllTodos), arg0, arg1)
}

// GetTodo mocks base method.
func (m *MockRepository) GetTodo(arg0 context.Context, arg1 uuid.UUID) (entity.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTodo", arg0, arg1)
	ret0, _ := ret[0].(entity.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTodo indicates an expected call of GetTodo.
func (mr *MockRepositoryMockRecorder) GetTodo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodo", reflect.TypeOf((*MockRepository)(nil).GetTodo), arg0, arg1)
}

// MarkAsDone mocks base method.
func (m *MockRepository) MarkAsDone(arg0 context.Context, arg1, arg2 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkAsDone", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkAsDone indicates an expected call of MarkAsDone.
func (mr *MockRepositoryMockRecorder) MarkAsDone(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAsDone", reflect.TypeOf((*MockRepository)(nil).MarkAsDone), arg0, arg1, arg2)
}

// UpdateTodosBody mocks base method.
func (m *MockRepository) UpdateTodosBody(arg0 context.Context, arg1 uuid.UUID, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTodosBody", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTodosBody indicates an expected call of UpdateTodosBody.
func (mr *MockRepositoryMockRecorder) UpdateTodosBody(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTodosBody", reflect.TypeOf((*MockRepository)(nil).UpdateTodosBody), arg0, arg1, arg2)
}

// UpdateTodosDeadline mocks base method.
func (m *MockRepository) UpdateTodosDeadline(arg0 context.Context, arg1 uuid.UUID, arg2 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTodosDeadline", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTodosDeadline indicates an expected call of UpdateTodosDeadline.
func (mr *MockRepositoryMockRecorder) UpdateTodosDeadline(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTodosDeadline", reflect.TypeOf((*MockRepository)(nil).UpdateTodosDeadline), arg0, arg1, arg2)
}
